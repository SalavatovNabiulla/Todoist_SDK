//Локальные функции 
Функция ВставитьПараметры(Адрес,Параметры)
	Адрес = Адрес + "?";
	Для Каждого Стр Из Параметры Цикл
		Адрес = Адрес + "&" + Стр.Ключ + "=" + Стр.Значение;
	КонецЦикла;
	Возврат Адрес;
КонецФункции
//
Функция ПолучитьСоединение()
	ЗС = Новый ЗащищенноеСоединениеOpenSSL();
	HTTPСоединение = Новый HTTPСоединение("api.todoist.com",,,,,,ЗС,);
	Возврат HTTPСоединение;
КонецФункции
//
Функция ПолучитьЗаголовки()
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization","Bearer "+Todoist_Сервер.ПолучитьТокенТекущегоПользователя());
	Возврат Заголовки;
КонецФункции
//
Функция ОбработатьОтвет(Ответ)
	Если Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//
Функция ОбработатьИдентификатор(Идентификатор)
	Если Идентификатор <> Неопределено Тогда
		Врем = Строка(Идентификатор);
		Врем = СтрЗаменить(Врем,",","");
		Врем = СтрЗаменить(Врем,".","");
		Врем = СтрЗаменить(Врем,"'","");
		Возврат Врем;
	Иначе
		Возврат Идентификатор;
	КонецЕсли;
КонецФункции

//Глобальные функции

///Проекты
Функция ПолучитьСписокВсехПроектов() Экспорт
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/projects";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = Новый Структура;
			ДанныеСтрока.Вставить("Идентификатор",ОбработатьИдентификатор(Стр.id));
			ДанныеСтрока.Вставить("Название",Стр.name);
			ДанныеСтрока.Вставить("КоличествоКомментариев",Стр.comment_count);
			ДанныеСтрока.Вставить("ПорядковыйНомер",Стр.order);
			ДанныеСтрока.Вставить("Цвет",Стр.color);
			ДанныеСтрока.Вставить("Общий",Стр.is_shared);
			ДанныеСтрока.Вставить("Избранное",Стр.is_favorite);
			ДанныеСтрока.Вставить("Входящие",Стр.is_inbox_project);
			ДанныеСтрока.Вставить("ВходящиеКоманды",Стр.is_team_inbox);
			ДанныеСтрока.Вставить("СпособОтображения",Стр.view_style);
			ДанныеСтрока.Вставить("Ссылка",Стр.url);
			ДанныеСтрока.Вставить("ИдентификаторРодителя",ОбработатьИдентификатор(Стр.parent_id));
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
////TODO: Создать новый проект
////TODO: Получить проект
////TODO: Обновить проект
////TODO: Удалить проект
////TODO: Получить участников проекта

///Секции
Функция ПолучитьСписокВсехСекцийПроекта(ИдентификаторПроекта = "") Экспорт
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/sections";
	//
	Параметры = Новый Структура;
	Параметры.Вставить("project_id",ИдентификаторПроекта);
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = Новый Структура;
			ДанныеСтрока.Вставить("Идентификатор",ОбработатьИдентификатор(Стр.id));
			ДанныеСтрока.Вставить("ИдентификаторПроекта",ОбработатьИдентификатор(Стр.project_id));
			ДанныеСтрока.Вставить("ПорядковыйНомер",Стр.order);
			ДанныеСтрока.Вставить("Название",Стр.name);		
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
////TODO: Создать новую секцию
////TODO: Получить секцию
////TODO: Обновить секцию
////TODO: Удалить секцию

///Задачи
Функция ПолучитьСписокАктивныхЗадач() Экспорт
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/tasks";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = Новый Структура;
			ДанныеСтрока.Вставить("ИдентификаторСоздателя",ОбработатьИдентификатор(Стр.creator_id));		
			ДанныеСтрока.Вставить("ДатаСоздания",Стр.created_at);
			ДанныеСтрока.Вставить("ИдентификаторИсполнителя",ОбработатьИдентификатор(Стр.assignee_id));
			ДанныеСтрока.Вставить("ИдентификаторДелегировавшего",ОбработатьИдентификатор(Стр.assigner_id));
			ДанныеСтрока.Вставить("КоличествоКомментариев",Стр.comment_count);
			ДанныеСтрока.Вставить("Исполнен",Стр.is_completed);
			ДанныеСтрока.Вставить("Содержание",Стр.content);
			ДанныеСтрока.Вставить("Описание",Стр.description);
			//                                
			ДанныеСрокИсполнения = Новый Структура;
			//
			Если Стр.due <> Неопределено Тогда
				ДанныеСрокИсполнения.Вставить("ДатаИсполнения",Стр.due.date);
				ДанныеСрокИсполнения.Вставить("Повторяющийся",Стр.due.is_recurring);
				ДанныеСрокИсполнения.Вставить("ДатаВремяСтрокой",Стр.due.string);
				Попытка
					ДанныеСрокИсполнения.Вставить("Время",Стр.due.datetime);	
				Исключение
					//
				КонецПопытки;
				//
				Попытка
					ДанныеСрокИсполнения.Вставить("ЧасовойПояс",Стр.due.timezone);
				Исключение
					//
				КонецПопытки;
			КонецЕсли;
			//
			ДанныеСтрока.Вставить("СрокИсполнения",ДанныеСрокИсполнения);
			ДанныеСтрока.Вставить("Идентификатор",ОбработатьИдентификатор(Стр.id));
			ДанныеСтрока.Вставить("Метки",Стр.labels);
			ДанныеСтрока.Вставить("ПорядковыйНомер",Стр.order);
			ДанныеСтрока.Вставить("Приоритет",Стр.priority);
			ДанныеСтрока.Вставить("ИдентификаторПроекта",ОбработатьИдентификатор(Стр.project_id));
			ДанныеСтрока.Вставить("ИдентификаторСекции",ОбработатьИдентификатор(Стр.section_id));
			ДанныеСтрока.Вставить("ИдентификаторРодителя",ОбработатьИдентификатор(Стр.parent_id));
			ДанныеСтрока.Вставить("Ссылка",Стр.url);
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
////TODO: Создать новую задачу
////TODO: Получить задачу
////TODO: Обновить задачу
////TODO: Закрыть задачу
////TODO: Активировать закрытую задачу
////TODO: Удалить задачу

///Комментарии
Функция ПолучитьСписокВсехКомментариевЗадачи(ИдентификаторЗадачи = "") Экспорт
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/comments";
	//
	Параметры = Новый Структура;
	Параметры.Вставить("task_id",ИдентификаторЗадачи);
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = Новый Структура;
			ДанныеСтрока.Вставить("Содержание",Стр.content);
			ДанныеСтрока.Вставить("Идентификатор",ОбработатьИдентификатор(Стр.id));
			ДанныеСтрока.Вставить("ДатаВремяСоздания",Стр.posted_at);
			ДанныеСтрока.Вставить("ИдентификаторПроекта",ОбработатьИдентификатор(Стр.project_id));
			ДанныеСтрока.Вставить("ИдентификаторЗадачи",ОбработатьИдентификатор(Стр.task_id));
			//
			ДанныеПривязанныйФайл = Новый Структура;
			Если Стр.attachment <> Неопределено Тогда
				ДанныеПривязанныйФайл.Вставить("НазваниеФайла",Стр.attachment.file_name);
				ДанныеПривязанныйФайл.Вставить("ТипФайла",Стр.attachment.file_type);
				ДанныеПривязанныйФайл.Вставить("СсылкаНаФайл",Стр.attachment.file_url);
				ДанныеПривязанныйФайл.Вставить("ТипСодержимого",Стр.attachment.resource_type);
			КонецЕсли;
			//
			ДанныеСтрока.Вставить("ПривязанныйФайл",ДанныеПривязанныйФайл);
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ПолучитьСписокВсехКомментариевПроекта(ИдентификаторПроекта = "") Экспорт
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/comments";
	//
	Параметры = Новый Структура;
	Параметры.Вставить("project_id",ИдентификаторПроекта);
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = Новый Структура;
			ДанныеСтрока.Вставить("Содержание",Стр.content);
			ДанныеСтрока.Вставить("Идентификатор",ОбработатьИдентификатор(Стр.id));
			ДанныеСтрока.Вставить("ДатаВремяСоздания",Стр.posted_at);
			ДанныеСтрока.Вставить("ИдентификаторПроекта",ОбработатьИдентификатор(Стр.project_id));
			ДанныеСтрока.Вставить("ИдентификаторЗадачи",ОбработатьИдентификатор(Стр.task_id));
			//
			ДанныеПривязанныйФайл = Новый Структура;
			Если Стр.attachment <> Неопределено Тогда
				ДанныеПривязанныйФайл.Вставить("НазваниеФайла",Стр.attachment.file_name);
				ДанныеПривязанныйФайл.Вставить("ТипФайла",Стр.attachment.file_type);
				ДанныеПривязанныйФайл.Вставить("СсылкаНаФайл",Стр.attachment.file_url);
				ДанныеПривязанныйФайл.Вставить("ТипСодержимого",Стр.attachment.resource_type);
			КонецЕсли;
			//
			ДанныеСтрока.Вставить("ПривязанныйФайл",ДанныеПривязанныйФайл);
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
////TODO: Создать новый комментарий
////TODO: Получить комментарий
////TODO: Обновить комментарий
////TODO: Удалить комментарий

///Метки
Функция ПолучитьВсеЛичныеМетки() Экспорт
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = Новый Структура;
			ДанныеСтрока.Вставить("Идентификатор",ОбработатьИдентификатор(Стр.id));
			ДанныеСтрока.Вставить("Название",Стр.name);
			ДанныеСтрока.Вставить("Цвет",Стр.color);
			ДанныеСтрока.Вставить("ПорядковыйНомер",Стр.order);
			ДанныеСтрока.Вставить("Избранное",Стр.is_favorite);
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
////TODO: Создать новую личную метку
////TODO: Получить личную метку
////TODO: Обновить личную метку
////TODO: Удалить личную метку
Функция ПолучитьВсеОбщиеМетки() Экспорт
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels/shared";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеМассив.Добавить(Стр);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
////TODO: Переименовать общую метку
////TODO: Удалить общую метку