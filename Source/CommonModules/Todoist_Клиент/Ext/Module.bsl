#Область ЛокальныеФункции 

Функция ВставитьПараметры(Адрес,Параметры)
	Адрес = Адрес + "?";
	Для Каждого Стр Из Параметры Цикл
		Адрес = Адрес + "&" + Стр.Ключ + "=" + Стр.Значение;
	КонецЦикла;
	Возврат Адрес;
КонецФункции
//
Функция ПолучитьСоединение()
	ЗС = Новый ЗащищенноеСоединениеOpenSSL();
	HTTPСоединение = Новый HTTPСоединение("api.todoist.com",,,,,,ЗС,);
	Возврат HTTPСоединение;	
КонецФункции
//
Функция ПолучитьЗаголовки()
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization","Bearer "+Todoist_Сервер.ПолучитьТокенТекущегоПользователя());
	Заголовки.Вставить("Content-Type","application/json");
	Возврат Заголовки;
КонецФункции
//
Функция ОбработатьОтвет(Ответ)
	Если Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//
Функция ОбработатьИдентификатор(Идентификатор)
	Если Идентификатор <> Неопределено Тогда
		Врем = Строка(Идентификатор);
		Врем = СтрЗаменить(Врем,",","");
		Врем = СтрЗаменить(Врем,".","");
		Врем = СтрЗаменить(Врем,"'","");
		Возврат Врем;
	Иначе
		Возврат Идентификатор;
	КонецЕсли;
КонецФункции
//
Функция ПолучитьJSONФайл(ДанныеТела)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ИмяВременногоФайла);
	ЗаписатьJSON(ЗаписьJSON, ДанныеТела,Новый НастройкиСериализацииJSON); 
	ЗаписьJSON.Закрыть();
	Возврат ИмяВременногоФайла;
КонецФункции
//
//TODO: Получить цвет

#КонецОбласти

#Область ГлобальныеФункции

#Область Проекты

Функция ПолучитьСписокВсехПроектов()  Экспорт
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/projects";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = ПолучитьСтруктуруДанных(0);
			ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(Стр.id);
			ДанныеСтрока.Название = Стр.name;
			ДанныеСтрока.КоличествоКомментариев = Стр.comment_count;
			ДанныеСтрока.ПорядковыйНомер = Стр.order;
			ДанныеСтрока.Цвет = Стр.color;
			ДанныеСтрока.Общий = Стр.is_shared;
			ДанныеСтрока.Избранное = Стр.is_favorite;
			ДанныеСтрока.Входящие = Стр.is_inbox_project;
			ДанныеСтрока.ВходящиеКоманды = Стр.is_team_inbox;
			ДанныеСтрока.СпособОтображения = Стр.view_style;
			ДанныеСтрока.Ссылка = Стр.url;
			ДанныеСтрока.ИдентификаторРодителя = ОбработатьИдентификатор(Стр.parent_id);
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция СоздатьНовыйПроект(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных();
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/projects";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	ДанныеТела = Новый Структура;
	ДанныеТела.Вставить("name",Данные.Название);
	Если Данные.ИдентификаторРодителя <> Неопределено Тогда
		ДанныеТела.Вставить("parent_id",Данные.ИдентификаторРодителя);
	КонецЕсли;
	//
	Если Данные.Цвет <> Неопределено Тогда
		ДанныеТела.Вставить("color",Данные.Цвет);
	КонецЕсли;
	//
	Если Данные.Избранное <> Неопределено Тогда
		ДанныеТела.Вставить("is_favorite",Данные.Избранное);
	КонецЕсли;
	//
	Если Данные.СпособОтображенияДоска Тогда
		ДанныеТела.Вставить("view_style","board");
	КонецЕсли;	
	//
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(0);
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.Название = ДанныеJSON.name;
		ДанныеСтрока.КоличествоКомментариев = ДанныеJSON.comment_count;
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Цвет = ДанныеJSON.color;
		ДанныеСтрока.Общий = ДанныеJSON.is_shared;
		ДанныеСтрока.Избранное = ДанныеJSON.is_favorite;
		ДанныеСтрока.Входящие = ДанныеJSON.is_inbox_project;
		ДанныеСтрока.ВходящиеКоманды = ДанныеJSON.is_team_inbox;
		ДанныеСтрока.СпособОтображения = ДанныеJSON.view_style;
		ДанныеСтрока.Ссылка = ДанныеJSON.url;
		ДанныеСтрока.ИдентификаторРодителя = ОбработатьИдентификатор(ДанныеJSON.parent_id);		
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ПолучитьПроект(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных();
	КонецЕсли;
	//
	Если Данные.ИдентификаторПроекта = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторПроекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/projects/"+Данные.ИдентификаторПроекта;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(0);
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.Название = ДанныеJSON.name;
		ДанныеСтрока.КоличествоКомментариев = ДанныеJSON.comment_count;
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Цвет = ДанныеJSON.color;
		ДанныеСтрока.Общий = ДанныеJSON.is_shared;
		ДанныеСтрока.Избранное = ДанныеJSON.is_favorite;
		ДанныеСтрока.Входящие = ДанныеJSON.is_inbox_project;
		ДанныеСтрока.ВходящиеКоманды = ДанныеJSON.is_team_inbox;
		ДанныеСтрока.СпособОтображения = ДанныеJSON.view_style;
		ДанныеСтрока.Ссылка = ДанныеJSON.url;
		ДанныеСтрока.ИдентификаторРодителя = ОбработатьИдентификатор(ДанныеJSON.parent_id);		
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли
КонецФункции
//
Функция ОбновитьПроект(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных();
	КонецЕсли;
	//
	Если Данные.ИдентификаторПроекта = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторПроекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/projects/"+Данные.ИдентификаторПроекта;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	ДанныеТела = Новый Структура;
	Если Данные.Название <> Неопределено Тогда
		Если СтрДлина(Данные.Название) > 0 Тогда
			ДанныеТела.Вставить("name",Данные.Название);
		КонецЕсли;
	КонецЕсли;
    //
	Если Данные.Цвет <> Неопределено Тогда
		ДанныеТела.Вставить("color",Данные.Цвет);	
	КонецЕсли;
	//
	Если Данные.Избранное <> Неопределено Тогда
		ДанныеТела.Вставить("is_favorite",Данные.Избранное);	
	КонецЕсли;
	//	
	Если Данные.СпособОтображенияДоска Тогда
		ДанныеТела.Вставить("view_style","board");
	КонецЕсли;	
	//
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(0);
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.Название = ДанныеJSON.name;
		ДанныеСтрока.КоличествоКомментариев = ДанныеJSON.comment_count;
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Цвет = ДанныеJSON.color;
		ДанныеСтрока.Общий = ДанныеJSON.is_shared;
		ДанныеСтрока.Избранное = ДанныеJSON.is_favorite;
		ДанныеСтрока.Входящие = ДанныеJSON.is_inbox_project;
		ДанныеСтрока.ВходящиеКоманды = ДанныеJSON.is_team_inbox;
		ДанныеСтрока.СпособОтображения = ДанныеJSON.view_style;
		ДанныеСтрока.Ссылка = ДанныеJSON.url;
		ДанныеСтрока.ИдентификаторРодителя = ОбработатьИдентификатор(ДанныеJSON.parent_id);		
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли
КонецФункции
//
Функция УдалитьПроект(Данные) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных();
	КонецЕсли;
	//
	Если Данные.ИдентификаторПроекта = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторПроекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/projects/"+Данные.ИдентификаторПроекта;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE",HTTPЗапрос);
	Возврат ОбработатьОтвет(Ответ);
КонецФункции
//
Функция ПолучитьУчастниковПроекта(Данные) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных();
	КонецЕсли;
	//
	Если Данные.ИдентификаторПроекта = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторПроекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/projects/"+Данные.ИдентификаторПроекта+"/collaborators";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = Новый Структура;
			ДанныеСтрока.Вставить("Идентификатор",ОбработатьИдентификатор(Стр.id));
			ДанныеСтрока.Вставить("ИмяПользователя",Стр.name);
			ДанныеСтрока.Вставить("EMail",Стр.email);
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область Секции

Функция ПолучитьСписокВсехСекций(Фильтр = Неопределено) Экспорт
	Если Фильтр = Неопределено Тогда
		Фильтр = ПолучитьСтруктуруФильтра();
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/sections";
	//
	Параметры = Новый Структура;
	Если Фильтр.ИдентификаторПроекта <> Неопределено Тогда
		Параметры.Вставить("project_id",Фильтр.ИдентификаторПроекта);
	КонецЕсли;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = ПолучитьСтруктуруДанных(1);
			ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(Стр.id);
			ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(Стр.project_id);
			ДанныеСтрока.ПорядковыйНомер = Стр.order;
			ДанныеСтрока.Название = Стр.name;		
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция СоздатьНовуюСекцию(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(1);
	КонецЕсли;
	//
	Если Данные.ИдентификаторПроекта = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.Название = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторПроекта = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.Название = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/sections";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	ДанныеТела = Новый Структура;
	ДанныеТела.Вставить("name",Данные.Название);
	ДанныеТела.Вставить("project_id",Данные.ИдентификаторПроекта);
	Если Данные.ПорядковыйНомер <> Неопределено Тогда
		ДанныеТела.Вставить("order",Данные.ПорядковыйНомер);
	КонецЕсли;		
	//
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Сообщить(Ответ.ПолучитьТелоКакСтроку());
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(1);
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(ДанныеJSON.project_id);
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Название = ДанныеJSON.name;		
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ПолучитьСекцию(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(1);
	КонецЕсли;
	//
	Если Данные.ИдентификаторСекции = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторСекции = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/sections/"+Данные.ИдентификаторСекции;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(1);
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(ДанныеJSON.project_id);
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Название = ДанныеJSON.name;		
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли
КонецФункции
//
Функция ОбновитьСекцию(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(1);
	КонецЕсли;
	//
	Если Данные.ИдентификаторСекции = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.Название = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторСекции = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.Название = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/sections/"+Данные.ИдентификаторСекции;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	ДанныеТела = Новый Структура;
	ДанныеТела.Вставить("name",Данные.Название);
	//
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(1);
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(ДанныеJSON.project_id);
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Название = ДанныеJSON.name;		
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли
КонецФункции
//
Функция УдалитьСекцию(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(1);
	КонецЕсли;
	//
	Если Данные.ИдентификаторСекции = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторСекции = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/sections/"+Данные.ИдентификаторСекции;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE",HTTPЗапрос);
	Возврат ОбработатьОтвет(Ответ);
КонецФункции

#КонецОбласти

#Область Задачи

Функция ПолучитьСписокАктивныхЗадач(Фильтр = Неопределено) Экспорт
	Если Фильтр = Неопределено Тогда
		Фильтр = ПолучитьСтруктуруФильтра(1);
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/tasks";
	//
	Параметры = Новый Структура;
	//
	Если Фильтр.ИдентификаторПроекта <> Неопределено Тогда
		Параметры.Вставить("project_id",Фильтр.ИдентификаторПроекта);
	КонецЕсли;
	//
	Если Фильтр.ИдентификаторСекции <> Неопределено Тогда
		Параметры.Вставить("section_id",Фильтр.ИдентификаторСекции);
	КонецЕсли;
	//
	Если Фильтр.Метка <> Неопределено Тогда
		Параметры.Вставить("label",Фильтр.Метка);
	КонецЕсли;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = ПолучитьСтруктуруДанных(2);
			ДанныеСтрока.ИдентификаторСоздателя = ОбработатьИдентификатор(Стр.creator_id);		
			ДанныеСтрока.ДатаСоздания = Стр.created_at;
			ДанныеСтрока.ИдентификаторИсполнителя = ОбработатьИдентификатор(Стр.assignee_id);
			ДанныеСтрока.ИдентификаторДелегировавшего = ОбработатьИдентификатор(Стр.assigner_id);
			ДанныеСтрока.КоличествоКомментариев = Стр.comment_count;
			ДанныеСтрока.Исполнен = Стр.is_completed;
			ДанныеСтрока.Содержание = Стр.content;
			ДанныеСтрока.Описание = Стр.description;
			//                                
			Если Стр.due <> Неопределено Тогда
				ДанныеСтрока.СрокИсполнения.ДатаИсполнения = Стр.due.date;
				ДанныеСтрока.СрокИсполнения.Повторяющийся = Стр.due.is_recurring;
				ДанныеСтрока.СрокИсполнения.ДатаВремяСтрокой = Стр.due.string;
				Попытка
					ДанныеСтрока.СрокИсполнения.Время = Стр.due.datetime;	
				Исключение
					//
				КонецПопытки;
				//
				Попытка
					ДанныеСтрока.СрокИсполнения.ЧасовойПояс = Стр.due.timezone;
				Исключение
					//
				КонецПопытки;
			КонецЕсли;
			//
			ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(Стр.id);
			ДанныеСтрока.Метки = Стр.labels;
			ДанныеСтрока.ПорядковыйНомер = Стр.order;
			ДанныеСтрока.Приоритет = Стр.priority;
			ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(Стр.project_id);
			ДанныеСтрока.ИдентификаторСекции = ОбработатьИдентификатор(Стр.section_id);
			ДанныеСтрока.ИдентификаторРодителя = ОбработатьИдентификатор(Стр.parent_id);
			ДанныеСтрока.Ссылка = Стр.url;
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция СоздатьНовуюЗадачу(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(2);
	КонецЕсли;
	//
	Если Данные.Содержание = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.Содержание = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/tasks";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	ДанныеТела = Новый Структура;
	ДанныеТела.Вставить("content",Данные.Содержание);
	//
	Если Данные.Описание <> Неопределено Тогда
		ДанныеТела.Вставить("description",Данные.Описание);	
	КонецЕсли;
	//
	Если Данные.ИдентификаторПроекта <> Неопределено Тогда
		ДанныеТела.Вставить("project_id",Данные.ИдентификаторПроекта);	
	КонецЕсли;
	//
	Если Данные.ИдентификаторСекции <> Неопределено Тогда
		ДанныеТела.Вставить("section_id",Данные.ИдентификаторСекции);	
	КонецЕсли;
	//
	Если Данные.ИдентификаторРодителя <> Неопределено Тогда
		ДанныеТела.Вставить("parent_id",Данные.ИдентификаторРодителя);	
	КонецЕсли;
	//
	Если Данные.ПорядковыйНомер <> Неопределено Тогда
		ДанныеТела.Вставить("order",Данные.ПорядковыйНомер);	
	КонецЕсли;
	//
	Если Данные.Метки <> Неопределено  Тогда
		ДанныеТела.Вставить("labels",Данные.Метки);	
	КонецЕсли;
	//
	Если Данные.Приоритет <> Неопределено  Тогда
		ДанныеТела.Вставить("priority",Данные.Приоритет);	
	КонецЕсли;
	//
	Если Данные.СрокИсполнения.ДатаИсполнения <> Неопределено  Тогда
		//TODO: Добавить возможность назначать срок исполнения		
	КонецЕсли;
	//
	Если Данные.ИдентификаторИсполнителя <> Неопределено  Тогда
		ДанныеТела.Вставить("assignee_id",Данные.ИдентификаторОтветственного);	
	КонецЕсли;
	//
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(2);
		ДанныеСтрока.ИдентификаторСоздателя = ОбработатьИдентификатор(ДанныеJSON.creator_id);		
		ДанныеСтрока.ДатаСоздания = ДанныеJSON.created_at;
		ДанныеСтрока.ИдентификаторИсполнителя = ОбработатьИдентификатор(ДанныеJSON.assignee_id);
		ДанныеСтрока.ИдентификаторДелегировавшего = ОбработатьИдентификатор(ДанныеJSON.assigner_id);
		ДанныеСтрока.КоличествоКомментариев = ДанныеJSON.comment_count;
		ДанныеСтрока.Исполнен = ДанныеJSON.is_completed;
		ДанныеСтрока.Содержание = ДанныеJSON.content;
		ДанныеСтрока.Описание = ДанныеJSON.description;
		//                                
		Если ДанныеJSON.due <> Неопределено Тогда
			ДанныеСтрока.СрокИсполнения.ДатаИсполнения = ДанныеJSON.due.date;
			ДанныеСтрока.СрокИсполнения.Повторяющийся = ДанныеJSON.due.is_recurring;
			ДанныеСтрока.СрокИсполнения.ДатаВремяСтрокой = ДанныеJSON.due.string;
			Попытка
				ДанныеСтрока.СрокИсполнения.Время = ДанныеJSON.due.datetime;	
			Исключение
				//
			КонецПопытки;
			//
			Попытка
				ДанныеСтрока.СрокИсполнения.ЧасовойПояс = ДанныеJSON.due.timezone;
			Исключение
				//
			КонецПопытки;
		КонецЕсли;
		//
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.Метки = ДанныеJSON.labels;
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Приоритет = ДанныеJSON.priority;
		ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(ДанныеJSON.project_id);
		ДанныеСтрока.ИдентификаторСекции = ОбработатьИдентификатор(ДанныеJSON.section_id);
		ДанныеСтрока.ИдентификаторРодителя = ОбработатьИдентификатор(ДанныеJSON.parent_id);
		ДанныеСтрока.Ссылка = ДанныеJSON.url;		
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ПолучитьЗадачу(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(2);
	КонецЕсли;
	//
	Если Данные.ИдентификаторЗадачи = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторЗадачи = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/tasks/"+Данные.ИдентификаторЗадачи;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(2);
		ДанныеСтрока.ИдентификаторСоздателя = ОбработатьИдентификатор(ДанныеJSON.creator_id);		
		ДанныеСтрока.ДатаСоздания = ДанныеJSON.created_at;
		ДанныеСтрока.ИдентификаторИсполнителя = ОбработатьИдентификатор(ДанныеJSON.assignee_id);
		ДанныеСтрока.ИдентификаторДелегировавшего = ОбработатьИдентификатор(ДанныеJSON.assigner_id);
		ДанныеСтрока.КоличествоКомментариев = ДанныеJSON.comment_count;
		ДанныеСтрока.Исполнен = ДанныеJSON.is_completed;
		ДанныеСтрока.Содержание = ДанныеJSON.content;
		ДанныеСтрока.Описание = ДанныеJSON.description;
		//                                
		Если ДанныеJSON.due <> Неопределено Тогда
			ДанныеСтрока.СрокИсполнения.ДатаИсполнения = ДанныеJSON.due.date;
			ДанныеСтрока.СрокИсполнения.Повторяющийся = ДанныеJSON.due.is_recurring;
			ДанныеСтрока.СрокИсполнения.ДатаВремяСтрокой = ДанныеJSON.due.string;
			Попытка
				ДанныеСтрока.СрокИсполнения.Время = ДанныеJSON.due.datetime;	
			Исключение
				//
			КонецПопытки;
			//
			Попытка
				ДанныеСтрока.СрокИсполнения.ЧасовойПояс = ДанныеJSON.due.timezone;
			Исключение
				//
			КонецПопытки;
		КонецЕсли;
		//
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.Метки = ДанныеJSON.labels;
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Приоритет = ДанныеJSON.priority;
		ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(ДанныеJSON.project_id);
		ДанныеСтрока.ИдентификаторСекции = ОбработатьИдентификатор(ДанныеJSON.section_id);
		ДанныеСтрока.ИдентификаторРодителя = ОбработатьИдентификатор(ДанныеJSON.parent_id);
		ДанныеСтрока.Ссылка = ДанныеJSON.url;		
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ОбновитьЗадачу(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(2);
	КонецЕсли;
	//
	Если Данные.ИдентификаторЗадачи = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторЗадачи = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/tasks/"+Данные.ИдентификаторЗадачи;
	//
	Параметры = Новый Структура;
	//
	ДанныеТела = Новый Структура;
	//
	Если Данные.Содержание <> Неопределено Тогда
		ДанныеТела.Вставить("content",Данные.Содержание);	
	КонецЕсли;
	//
	Если Данные.Описание <> Неопределено Тогда
		ДанныеТела.Вставить("description",Данные.Описание);	
	КонецЕсли;
	//
	Если Данные.Метки <> Неопределено  Тогда
		ДанныеТела.Вставить("labels",Данные.Метки);	
	КонецЕсли;
	//
	Если Данные.Приоритет <> Неопределено  Тогда
		ДанныеТела.Вставить("priority",Данные.Приоритет);	
	КонецЕсли;
	//
	Если Данные.ДатаИсполнения <> Неопределено  Тогда
		//TODO: Добавить возможность назначать срок исполнения		
	КонецЕсли;
	//
	Если Данные.ИдентификаторОтветственного <> Неопределено  Тогда
		ДанныеТела.Вставить("assignee_id",Данные.ИдентификаторОтветственного);	
	КонецЕсли;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(2);
		ДанныеСтрока.ИдентификаторСоздателя = ОбработатьИдентификатор(ДанныеJSON.creator_id);		
		ДанныеСтрока.ДатаСоздания = ДанныеJSON.created_at;
		ДанныеСтрока.ИдентификаторИсполнителя = ОбработатьИдентификатор(ДанныеJSON.assignee_id);
		ДанныеСтрока.ИдентификаторДелегировавшего = ОбработатьИдентификатор(ДанныеJSON.assigner_id);
		ДанныеСтрока.КоличествоКомментариев = ДанныеJSON.comment_count;
		ДанныеСтрока.Исполнен = ДанныеJSON.is_completed;
		ДанныеСтрока.Содержание = ДанныеJSON.content;
		ДанныеСтрока.Описание = ДанныеJSON.description;
		//                                
		Если ДанныеJSON.due <> Неопределено Тогда
			ДанныеСтрока.СрокИсполнения.ДатаИсполнения = ДанныеJSON.due.date;
			ДанныеСтрока.СрокИсполнения.Повторяющийся = ДанныеJSON.due.is_recurring;
			ДанныеСтрока.СрокИсполнения.ДатаВремяСтрокой = ДанныеJSON.due.string;
			Попытка
				ДанныеСтрока.СрокИсполнения.Время = ДанныеJSON.due.datetime;	
			Исключение
				//
			КонецПопытки;
			//
			Попытка
				ДанныеСтрока.СрокИсполнения.ЧасовойПояс = ДанныеJSON.due.timezone;
			Исключение
				//
			КонецПопытки;
		КонецЕсли;
		//
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.Метки = ДанныеJSON.labels;
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Приоритет = ДанныеJSON.priority;
		ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(ДанныеJSON.project_id);
		ДанныеСтрока.ИдентификаторСекции = ОбработатьИдентификатор(ДанныеJSON.section_id);
		ДанныеСтрока.ИдентификаторРодителя = ОбработатьИдентификатор(ДанныеJSON.parent_id);
		ДанныеСтрока.Ссылка = ДанныеJSON.url;		
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ЗакрытьЗадачу(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(2);
	КонецЕсли;
	//
	Если Данные.ИдентификаторЗадачи = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторЗадачи = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/tasks/"+Данные.ИдентификаторЗадачи+"/close";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Возврат ОбработатьОтвет(Ответ);	
КонецФункции
//
Функция АктивироватьЗакрытуюЗадачу(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(2);
	КонецЕсли;
	//
	Если Данные.ИдентификаторЗадачи = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторЗадачи = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/tasks/"+Данные.ИдентификаторЗадачи+"/reopen";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Возврат ОбработатьОтвет(Ответ);
КонецФункции
//
Функция УдалитьЗадачу(Данные) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(2);
	КонецЕсли;
	//
	Если Данные.ИдентификаторЗадачи = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторЗадачи = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/tasks/"+Данные.ИдентификаторЗадачи;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE",HTTPЗапрос);
	Возврат ОбработатьОтвет(Ответ);
КонецФункции

#КонецОбласти

#Область Комментарии

Функция ПолучитьСписокВсехКомментариев(Фильтр = Неопределено) Экспорт
	Если Фильтр = Неопределено Тогда
		Фильтр = ПолучитьСтруктуруФильтра(2);
	КонецЕсли;
	//
	Если Фильтр.ИдентификаторЗадачи = "" Или Фильтр.ИдентификаторПроекта = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Фильтр.ИдентификаторЗадачи = Неопределено И Фильтр.ИдентификаторПроекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/comments";
	//
	Параметры = Новый Структура;
	Если Фильтр.ИдентификаторЗадачи = Неопределено Тогда
		Параметры.Вставить("project_id",Фильтр.ИдентификаторПроекта);
	ИначеЕсли Фильтр.ИдентификаторПроекта = Неопределено Тогда
		Параметры.Вставить("task_id",Фильтр.ИдентификаторЗадачи);
	ИначеЕсли Фильтр.ИдентификаторПроекта <> Неопределено И Фильтр.ИдентификаторПроекта <> Неопределено Тогда
		Параметры.Вставить("task_id",Фильтр.ИдентификаторЗадачи);
	КонецЕсли;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = ПолучитьСтруктуруДанных(3);
			ДанныеСтрока.Содержание = Стр.content;
			ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(Стр.id);
			ДанныеСтрока.ДатаВремяСоздания = Стр.posted_at;
			ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(Стр.project_id);
			ДанныеСтрока.ИдентификаторЗадачи = ОбработатьИдентификатор(Стр.task_id);
			//
			Если Стр.attachment <> Неопределено Тогда
				Попытка
					ДанныеСтрока.ПривязанныйФайл.НазваниеФайла = Стр.attachment.file_name;
					ДанныеСтрока.ПривязанныйФайл.ТипФайла = Стр.attachment.file_type;
					ДанныеСтрока.ПривязанныйФайл.СсылкаНаФайл = Стр.attachment.file_url;
					ДанныеСтрока.ПривязанныйФайл.ТипСодержимого = Стр.attachment.resource_type;
				Исключение
					//
				КонецПопытки;
			КонецЕсли;
			//
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция СоздатьНовыйКомментарий(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(3);
	КонецЕсли;
	//
	Если Данные.ИдентификаторЗадачи = "" Или Данные.ИдентификаторПроект = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторЗадачи = Неопределено И Данные.ИдентификаторПроект = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.Содержание = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.Содержание = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/comments";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	ДанныеТела = Новый Структура;
	Если Данные.ИдентификаторЗадачи = Неопределено Тогда
		Параметры.Вставить("project_id",Данные.ИдентификаторПроекта);
	ИначеЕсли Данные.ИдентификаторПроекта = Неопределено Тогда
		Параметры.Вставить("task_id",Данные.ИдентификаторПроекта);
	ИначеЕсли Данные.ИдентификаторПроекта <> Неопределено И Данные.ИдентификаторПроекта <> Неопределено Тогда
		Параметры.Вставить("task_id",Данные.ИдентификаторПроекта);
	КонецЕсли;
	//
	ДанныеТела.Вставить("content",Данные.Содержание);
	//TODO: Добавить возможность привязывать файлы с помощью облака
	//
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(3);
		ДанныеСтрока.Содержание = ДанныеJSON.content;
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.ДатаВремяСоздания = ДанныеJSON.posted_at;
		ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(ДанныеJSON.project_id);
		ДанныеСтрока.ИдентификаторЗадачи = ОбработатьИдентификатор(ДанныеJSON.task_id);
		//
		Если ДанныеJSON.attachment <> Неопределено Тогда
			ДанныеСтрока.ПривязанныйФайл.НазваниеФайла = ДанныеJSON.attachment.file_name;
			ДанныеСтрока.ПривязанныйФайл.ТипФайла = ДанныеJSON.attachment.file_type;
			ДанныеСтрока.ПривязанныйФайл.СсылкаНаФайл = ДанныеJSON.attachment.file_url;
			ДанныеСтрока.ПривязанныйФайл.ТипСодержимого = ДанныеJSON.attachment.resource_type;
		КонецЕсли;
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ПолучитьКомментарий(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(3);
	КонецЕсли;
	//
	Если Данные.ИдентификаторКомментария = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторКомментария = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/comments/"+Данные.ИдентификаторКомментария;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(3);
		ДанныеСтрока.Содержание = ДанныеJSON.content;
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.ДатаВремяСоздания = ДанныеJSON.posted_at;
		ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(ДанныеJSON.project_id);
		ДанныеСтрока.ИдентификаторЗадачи = ОбработатьИдентификатор(ДанныеJSON.task_id);
		//
		Если ДанныеJSON.attachment <> Неопределено Тогда
			ДанныеСтрока.ПривязанныйФайл.НазваниеФайла = ДанныеJSON.attachment.file_name;
			ДанныеСтрока.ПривязанныйФайл.ТипФайла = ДанныеJSON.attachment.file_type;
			ДанныеСтрока.ПривязанныйФайл.СсылкаНаФайл = ДанныеJSON.attachment.file_url;
			ДанныеСтрока.ПривязанныйФайл.ТипСодержимого = ДанныеJSON.attachment.resource_type;
		КонецЕсли;
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ОбновитьКомментарий(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(3);
	КонецЕсли;
	//
	Если Данные.ИдентификаторКомментария = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторКомментария = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/comments/"+Данные.ИдентификаторКомментария;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	ДанныеТела = Новый Структура;
	ДанныеТела.Вставить("content",Данные.Содержание);
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(3);
		ДанныеСтрока.Содержание = ДанныеJSON.content;
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.ДатаВремяСоздания = ДанныеJSON.posted_at;
		ДанныеСтрока.ИдентификаторПроекта = ОбработатьИдентификатор(ДанныеJSON.project_id);
		ДанныеСтрока.ИдентификаторЗадачи = ОбработатьИдентификатор(ДанныеJSON.task_id);
		//
		Если ДанныеJSON.attachment <> Неопределено Тогда
			ДанныеСтрока.ПривязанныйФайл.НазваниеФайла = ДанныеJSON.attachment.file_name;
			ДанныеСтрока.ПривязанныйФайл.ТипФайла = ДанныеJSON.attachment.file_type;
			ДанныеСтрока.ПривязанныйФайл.СсылкаНаФайл = ДанныеJSON.attachment.file_url;
			ДанныеСтрока.ПривязанныйФайл.ТипСодержимого = ДанныеJSON.attachment.resource_type;
		КонецЕсли;
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция УдалитьКомментарий(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(3);
	КонецЕсли;
	//
	Если Данные.ИдентификаторКомментария = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторКомментария = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/comments/"+Данные.ИдентификаторКомментария;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE",HTTPЗапрос);
	Возврат ОбработатьОтвет(Ответ);
КонецФункции

#КонецОбласти

#Область Метки

Функция ПолучитьВсеЛичныеМетки() Экспорт
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels";
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = ПолучитьСтруктуруДанных(4);
			ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(Стр.id);
			ДанныеСтрока.Название = Стр.name;
			ДанныеСтрока.Цвет = Стр.color;
			ДанныеСтрока.ПорядковыйНомер = Стр.order;
			ДанныеСтрока.Избранное = Стр.is_favorite;
			ДанныеМассив.Добавить(ДанныеСтрока);
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция СоздатьНовуюЛичнуюМетку(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(4);
	КонецЕсли;
	//
	Если Данные.Название = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.Название = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels";
	//
	Параметры = Новый Структура;
	//
	ДанныеТела = Новый Структура;
	ДанныеТела.Вставить("name",Данные.Название);
	Если ДанныеТела.ПорядковыйНомер <> Неопределено Тогда
		ДанныеТела.Вставить("order",Данные.ПорядковыйНомер);
	КонецЕсли;
	//
	Если ДанныеТела.Цвет <> Неопределено Тогда
		ДанныеТела.Вставить("color",Данные.Цвет);
	КонецЕсли;
	//
	Если ДанныеТела.Избранное <> Неопределено Тогда
		ДанныеТела.Вставить("is_favorite",Данные.Избранное);
	КонецЕсли;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(4);
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.Название = ДанныеJSON.name;
		ДанныеСтрока.Цвет = ДанныеJSON.color;
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Избранное = ДанныеJSON.is_favorite;
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ПолучитьЛичнуюМетку(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(4);
	КонецЕсли;
	//
	Если Данные.ИдентификаторМетки = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторМетки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels/"+Данные.ИдентификаторМетки;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(4);
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.Название = ДанныеJSON.name;
		ДанныеСтрока.Цвет = ДанныеJSON.color;
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Избранное = ДанныеJSON.is_favorite;
			//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ОбновитьЛичнуюМетку(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(4);
	КонецЕсли;
	//
	Если Данные.ИдентификаторМетки = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторМетки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels/"+Данные.ИдентификаторМетки;
	//
	Параметры = Новый Структура;
	//
	ДанныеТела = Новый Структура;
	Если ДанныеТела.Название <> Неопределено Тогда
		ДанныеТела.Вставить("name",Данные.Название);
	КонецЕсли;
	//
	Если ДанныеТела.ПорядковыйНомер <> Неопределено Тогда
		ДанныеТела.Вставить("order",Данные.ПорядковыйНомер);
	КонецЕсли;
	//
	Если ДанныеТела.Цвет <> Неопределено Тогда
		ДанныеТела.Вставить("color",Данные.Цвет);
	КонецЕсли;
	//
	Если ДанныеТела.Избранное <> Неопределено Тогда
		ДанныеТела.Вставить("is_favorite",Данные.Избранное);
	КонецЕсли;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеСтрока = ПолучитьСтруктуруДанных(4);
		ДанныеСтрока.Идентификатор = ОбработатьИдентификатор(ДанныеJSON.id);
		ДанныеСтрока.Название = ДанныеJSON.name;
		ДанныеСтрока.Цвет = ДанныеJSON.color;
		ДанныеСтрока.ПорядковыйНомер = ДанныеJSON.order;
		ДанныеСтрока.Избранное = ДанныеJSON.is_favorite;
		//
		Возврат ДанныеСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция УдалитьЛичнуюМетку(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(4);
	КонецЕсли;
	//
	Если Данные.ИдентификаторМетки = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.ИдентификаторМетки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels/"+Данные.ИдентификаторМетки;
	//
	Параметры = Новый Структура;
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE",HTTPЗапрос);
	Возврат ОбработатьОтвет(Ответ);
КонецФункции
//
Функция ПолучитьВсеОбщиеМетки(Фильтр = Неопределено) Экспорт
	Если Фильтр = Неопределено Тогда
		Фильтр = ПолучитьСтруктуруФильтра(3);
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels/shared";
	//
	Параметры = Новый Структура;
	Если Фильтр.ИсключатьИменаЛичныхМеток <> Неопределено Тогда
		Параметры.Вставить("omit_personal",Фильтр.ИсключатьИменаЛичныхМеток);
	КонецЕсли;	
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если ОбработатьОтвет(Ответ) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//
		ДанныеМассив = Новый Массив;
		Для Каждого Стр Из ДанныеJSON Цикл
			ДанныеСтрока = ПолучитьСтруктуруДанных(5);
			ДанныеСтрока.Название = Стр;
		КонецЦикла;
		//
		Возврат ДанныеМассив;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
//
Функция ПереименоватьОбщуюМетку(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(5);
	КонецЕсли;
	//
	Если Данные.Название = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.НовоеНазвание = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.Название = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Данные.НовоеНазвание = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels/shared/rename";
	//
	Параметры = Новый Структура;
	//
	ДанныеТела = Новый Структура;
	ДанныеТела.Вставить("name",Данные.Название);
	ДанныеТела.Вставить("new_name",Данные.НовоеНазвание);
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Возврат ОбработатьОтвет(Ответ);
КонецФункции
//
Функция УдалитьОбщуюМетку(Данные = Неопределено) Экспорт
	Если Данные = Неопределено Тогда
		Данные = ПолучитьСтруктуруДанных(5);
	КонецЕсли;
	//
	Если Данные.Название = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	HTTPСоединение = ПолучитьСоединение();
	Адрес = "/rest/v2/labels/shared/remove";
	//
	Параметры = Новый Структура;
	//
	ДанныеТела = Новый Структура;
	ДанныеТела.Вставить("name",Данные.Название);
	//
	HTTPЗапрос = Новый HTTPЗапрос(ВставитьПараметры(Адрес,Параметры),ПолучитьЗаголовки());
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолучитьJSONФайл(ДанныеТела));
	//
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Возврат ОбработатьОтвет(Ответ);
КонецФункции

#КонецОбласти

#Область Другое

Функция ПолучитьСтруктуруДанных(НомерСтруктуры = 0) Экспорт
	Шаблон = Новый Структура;
	//
	Если НомерСтруктуры = 0 Тогда // Проект
		Шаблон.Вставить("Идентификатор",Неопределено);
		Шаблон.Вставить("Название",Неопределено);
		Шаблон.Вставить("КоличествоКомментариев",Неопределено);
		Шаблон.Вставить("ПорядковыйНомер",Неопределено);
		Шаблон.Вставить("Цвет",Неопределено);
		Шаблон.Вставить("Общий",Неопределено);
		Шаблон.Вставить("Избранное",Неопределено);
		Шаблон.Вставить("Входящие",Неопределено);
		Шаблон.Вставить("ВходящиеКоманды",Неопределено);
		Шаблон.Вставить("СпособОтображения",Неопределено);
		Шаблон.Вставить("Ссылка",Неопределено);
		Шаблон.Вставить("ИдентификаторРодителя",Неопределено);
	ИначеЕсли НомерСтруктуры = 1 Тогда // Секция
		Шаблон.Вставить("Идентификатор",Неопределено);
		Шаблон.Вставить("ИдентификаторПроекта",Неопределено);
		Шаблон.Вставить("ПорядковыйНомер",Неопределено);
		Шаблон.Вставить("Название",Неопределено);
	ИначеЕсли НомерСтруктуры = 2 Тогда // Задача
		Шаблон.Вставить("ИдентификаторСоздателя",Неопределено);		
		Шаблон.Вставить("ДатаСоздания",Неопределено);
		Шаблон.Вставить("ИдентификаторИсполнителя",Неопределено);
		Шаблон.Вставить("ИдентификаторДелегировавшего",Неопределено);
		Шаблон.Вставить("КоличествоКомментариев",Неопределено);
		Шаблон.Вставить("Исполнен",Неопределено);
		Шаблон.Вставить("Содержание",Неопределено);
		Шаблон.Вставить("Описание",Неопределено);
		//                                
		СрокИсполнения = Новый Структура;
		СрокИсполнения.Вставить("ДатаИсполнения",Неопределено);
		СрокИсполнения.Вставить("Повторяющийся",Неопределено);
		СрокИсполнения.Вставить("ДатаВремяСтрокой",Неопределено);
		СрокИсполнения.Вставить("Время",Неопределено);	
		СрокИсполнения.Вставить("ЧасовойПояс",Неопределено);
		//
		Шаблон.Вставить("СрокИсполнения",СрокИсполнения);
		Шаблон.Вставить("Идентификатор",Неопределено);
		Шаблон.Вставить("Метки",Неопределено);
		Шаблон.Вставить("ПорядковыйНомер",Неопределено);
		Шаблон.Вставить("Приоритет",Неопределено);
		Шаблон.Вставить("ИдентификаторПроекта",Неопределено);
		Шаблон.Вставить("ИдентификаторСекции",Неопределено);
		Шаблон.Вставить("ИдентификаторРодителя",Неопределено);
		Шаблон.Вставить("Ссылка",Неопределено);
	ИначеЕсли НомерСтруктуры = 3 Тогда // Комментарий
		Шаблон.Вставить("Содержание",Неопределено);
		Шаблон.Вставить("Идентификатор",Неопределено);
		Шаблон.Вставить("ДатаВремяСоздания",Неопределено);
		Шаблон.Вставить("ИдентификаторПроекта",Неопределено);
		Шаблон.Вставить("ИдентификаторЗадачи",Неопределено);
		//
		ПривязанныйФайл = Новый Структура;
		ПривязанныйФайл.Вставить("НазваниеФайла",Неопределено);
		ПривязанныйФайл.Вставить("ТипФайла",Неопределено);
		ПривязанныйФайл.Вставить("СсылкаНаФайл",Неопределено);
		ПривязанныйФайл.Вставить("ТипСодержимого",Неопределено);
		//
		Шаблон.Вставить("ПривязанныйФайл",ПривязанныйФайл);
	ИначеЕсли НомерСтруктуры = 4 Тогда // Личная метка
		Шаблон.Вставить("Идентификатор",Неопределено);
		Шаблон.Вставить("Название",Неопределено);
		Шаблон.Вставить("Цвет",Неопределено);
		Шаблон.Вставить("ПорядковыйНомер",Неопределено);
		Шаблон.Вставить("Избранное",Неопределено);
	ИначеЕсли НомерСтруктуры = 5 Тогда // Общая метка
		Шаблон.Вставить("Название",Неопределено);
        Шаблон.Вставить("НовоеНазвание",Неопределено);
	КонецЕсли;
	//
	Возврат Шаблон;
КонецФункции
//
Функция ПолучитьСтруктуруФильтра(НомерФильтра = 0) Экспорт
	Фильтр = Новый Структура;
	Если НомерФильтра = 0 Тогда //Секции
		Фильтр.Вставить("ИдентификаторПроекта",Неопределено);
	ИначеЕсли НомерФильтра = 1 Тогда //Задачи
		Фильтр.Вставить("ИдентификаторПроекта",Неопределено);
		Фильтр.Вставить("ИдентификаторСекции",Неопределено);
		Фильтр.Вставить("Метка",Неопределено);
	ИначеЕсли НомерФильтра = 2 Тогда //Комментарии
		Фильтр.Вставить("ИдентификаторЗадачи",Неопределено);
		Фильтр.Вставить("ИдентификаторПроекта",Неопределено);
	ИначеЕсли НомерФильтра = 3 Тогда //Общие метки
		Фильтр.Вставить("ИсключатьИменаЛичныхМеток",Неопределено);
	КонецЕсли;
	Возврат Фильтр;
КонецФункции

#КонецОбласти

#КонецОбласти
